{"ast":null,"code":"var _jsxFileName = \"/Users/tszli/Desktop/cat-tinder-THC/src/App.js\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport CatIndex from \"./pages/CatIndex\";\nimport CatShow from \"./pages/CatShow\";\nimport CatCreate from \"./pages/CatCreate\";\nimport cats from \"./cats\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getCats = () => {\n      fetch(\"http://localhost:3001/cats\").then(response => {\n        if (response.status === 200) {\n          return response.json();\n        }\n      }).then(catsArray => {\n        this.setState({\n          cats: catsArray\n        });\n      });\n    };\n\n    this.createCat = newcat => {\n      return fetch(\"http://localhost:3001/cats\", {\n        // converting an object to a string\n        body: JSON.stringify(newcat),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"POST\"\n      }).then(response => {\n        // if the response is good call the getCats method\n        if (response.ok) {\n          return this.getCats();\n        }\n      });\n    };\n\n    this.state = {\n      allCats: cats,\n      cats: []\n    };\n    this.getCats();\n  }\n\n  componentWillMount() {\n    this.getCats();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/cat/:id\",\n      component: CatShow,\n      render: props => /*#__PURE__*/React.createElement(CatIndex, {\n        cats: this.state.allCats,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/catcreate\",\n      render: props => /*#__PURE__*/React.createElement(CatCreate, {\n        handleSubmit: this.createCat,\n        cats: this.state.allCats,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 66\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: \"/\",\n      render: props => /*#__PURE__*/React.createElement(CatIndex, {\n        cats: this.state.allCats,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 57\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tszli/Desktop/cat-tinder-THC/src/App.js"],"names":["React","Component","BrowserRouter","Router","Switch","Route","Header","CatIndex","CatShow","CatCreate","cats","App","constructor","getCats","fetch","then","response","status","json","catsArray","setState","createCat","newcat","body","JSON","stringify","headers","method","ok","state","allCats","componentWillMount","render","props"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport \"./App.css\"\n\nimport Header from \"./components/Header\"\nimport CatIndex from \"./pages/CatIndex\"\nimport CatShow from \"./pages/CatShow\"\nimport CatCreate from \"./pages/CatCreate\"\nimport cats from \"./cats\"\n\nclass App extends Component{\n  constructor(){\n   super()\n   this.state = {\n     allCats: cats,\n     cats: [],\n   }\n   this.getCats()\n }\n\n componentWillMount(){\n    \tthis.getCats()\n    }\n\n    getCats = () => {\n      fetch(\"http://localhost:3001/cats\")\n      .then((response)=>{\n        if(response.status === 200){\n          return(response.json())\n        }\n      })\n      .then((catsArray)=> {\n        this.setState({cats: catsArray})\n      })\n    }\n    createCat = (newcat) => {\n      return fetch(\"http://localhost:3001/cats\", {\n        // converting an object to a string\n        body: JSON.stringify(newcat),\n        // specify the info being sent in JSON and the info returning should be JSON\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        // HTTP verb so the correct endpoint is invoked on the server\n        method: \"POST\"\n      })\n      .then((response) => {\n        // if the response is good call the getCats method\n        if(response.ok){\n          return this.getCats()\n        }\n      })\n    }\n\n  render(){\n    return(\n      <>\n\n        <Header />\n        <Router>\n          <Switch>\n            <Route exact path=\"/cat/:id\" component={ CatShow }\n              render={ (props) => <CatIndex cats={ this.state.allCats }/> }/>\n            <Route exact path=\"/catcreate\" render={ (props) =>   <CatCreate handleSubmit={ this.createCat } cats={ this.state.allCats } /> } />\n            <Route exact path=\"/\" render={ (props) =>   <CatIndex cats={ this.state.allCats } /> } />\n          </Switch>\n        </Router>\n\n      </>\n    )\n  }\n}\nexport default App\n"]},"metadata":{},"sourceType":"module"}